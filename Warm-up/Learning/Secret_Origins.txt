__________________________________________________________________________
Finding the number of 1 in a binary representation of a decimal number
        deque<char> dq,tdq;
        while (temp > 0)
        {
            int x = temp % 2;
            x += '0'; // converting digit to char
            dq.push_back(x);
            temp /= 2;
        }
        reverse(dq.begin(), dq.end());
        for(auto x:dq) cerr<<x;
        cerr<<endl;
___________________________________________________________________________
Converting binary string to decimal
    int decimal = stoi(string(dq.begin(), dq.end()), 0, 2); 
--------------------------------------------------------------------------------
prev_permutation(v.begin(), v.end())
next_permutation(v.begin(), v.end())

if(next_permutation(v.begin(), v.end()))
Return Value
    Returns true if the container could be rearranged to the to the lexicographical smaller permutation.
    Returns false otherwise.
    if possible then change the vector and rearranged elements
    vector<int> v = {2, 1, 3};
  
    // Printing all the possible permutations
    // smaller than the current one
    do {
        for (auto i: v) cout << i << " ";
        cout << endl;
    } while (prev_permutation(v.begin(), v.end()));
----------------------------------------------------------------------------------

Resources : https://www.geeksforgeeks.org/stdnext_permutation-prev_permutation-c/
Problems : https://lightoj.com/problem/secret-origins